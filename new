import React, { useState } from 'react';
import { Upload, BarChart3, TrendingUp, PieChart as PieChartIcon, Download, Share2, Sparkles, FileSpreadsheet, Database, Zap, Filter, Calendar, Activity, DollarSign, Users, ShoppingCart, ArrowUp, ArrowDown, Bell, Settings, LogIn, Menu, X, Eye, Code, Mail } from 'lucide-react';
import { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Area, AreaChart, ScatterChart, Scatter, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';

const InsightFlow = () => {
  const [currentView, setCurrentView] = useState('landing');
  const [uploadedData, setUploadedData] = useState(null);
  const [dataPreview, setDataPreview] = useState(null);
  const [dashboard, setDashboard] = useState(null);
  const [loading, setLoading] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const [selectedFilters, setSelectedFilters] = useState({});
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  const COLORS = ['#6366f1', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#3b82f6', '#ef4444', '#14b8a6'];

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFile(e.dataTransfer.files[0]);
    }
  };

  const handleFileInput = (e) => {
    if (e.target.files && e.target.files[0]) {
      handleFile(e.target.files[0]);
    }
  };

  const detectColumnType = (values) => {
    const nonNullValues = values.filter(v => v != null && v !== '');
    if (nonNullValues.length === 0) return 'unknown';
    
    // Check for numeric values
    const numericCount = nonNullValues.filter(v => {
      if (typeof v === 'number') return true;
      if (typeof v === 'string') {
        const num = Number(v);
        return !isNaN(num) && v.trim() !== '';
      }
      return false;
    }).length;
    
    // Check for date values
    const dateCount = nonNullValues.filter(v => {
      if (typeof v === 'string') {
        const date = new Date(v);
        return !isNaN(date.getTime());
      }
      return v instanceof Date && !isNaN(v.getTime());
    }).length;
    
    if (numericCount / nonNullValues.length > 0.8) return 'numeric';
    if (dateCount / nonNullValues.length > 0.8) return 'date';
    return 'categorical';
  };

  const parseCSV = (text) => {
    const lines = text.split('\n').filter(line => line.trim() !== '');
    if (lines.length < 2) {
      throw new Error('CSV file must contain at least a header and one data row');
    }
    
    const headers = lines[0].split(',').map(header => 
      header.trim().replace(/\s+/g, '_').replace(/[^\w\s-]/g, '')
    );
    
    const data = [];
    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(',');
      const row = {};
      
      headers.forEach((header, index) => {
        let value = values[index] ? values[index].trim() : '';
        // Try to convert to number if possible
        if (value && !isNaN(value) && value.trim() !== '') {
          value = Number(value);
        }
        row[header] = value;
      });
      
      data.push(row);
    }
    
    return data;
  };

  const handleFile = (file) => {
    const fileName = file.name.toLowerCase();
    
    // Check if it's an Excel file
    if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {
      alert('📊 Excel File Detected\n\nExcel file support requires additional libraries that are not available in this demo environment.\n\n✅ Please convert your Excel file to CSV:\n\n1. Open your Excel file\n2. Click "File" → "Save As"\n3. Choose "CSV (Comma delimited)" as the file type\n4. Save and upload the CSV file\n\nAlternatively, you can use Google Sheets:\n1. Upload to Google Sheets\n2. File → Download → CSV\n\nCSV files work perfectly with InsightFlow!');
      return;
    }
    
    // Handle CSV files
    const reader = new FileReader();
    
    reader.onload = (e) => {
      try {
        const text = e.target.result;
        let data;
        
        if (fileName.endsWith('.csv')) {
          data = parseCSV(text);
        } else {
          throw new Error('Unsupported file format. Please upload a CSV file.');
        }

        if (!data || data.length === 0) {
          alert('⚠️ No data found in file\n\nPlease make sure your file contains data with headers.');
          return;
        }
        
        const columns = Object.keys(data[0] || {});
        
        if (columns.length === 0) {
          alert('⚠️ Invalid file format\n\nPlease make sure your file has proper column headers.');
          return;
        }
        
        const columnTypes = {};
        columns.forEach(col => {
          const values = data.map(row => row[col]);
          columnTypes[col] = detectColumnType(values);
        });
        
        setUploadedData(data);
        setDataPreview({
          columns,
          columnTypes,
          rows: data.slice(0, 5),
          totalRows: data.length,
          fileName: file.name
        });
        setCurrentView('preview');
      } catch (error) {
        alert('❌ Error reading file\n\n' + error.message + '\n\nPlease make sure your file is properly formatted.');
      }
    };
    
    reader.onerror = () => {
      alert('❌ Failed to read file\n\nPlease try again or use a different file.');
    };
    
    reader.readAsText(file);
  };

  const analyzeAndGenerateDashboard = () => {
    if (!uploadedData || uploadedData.length === 0) {
      alert('No data available to analyze');
      return;
    }

    setLoading(true);
    
    setTimeout(() => {
      try {
        const cols = Object.keys(uploadedData[0]);
        const numericCols = cols.filter(col => 
          dataPreview.columnTypes[col] === 'numeric'
        );
        const categoricalCols = cols.filter(col => 
          dataPreview.columnTypes[col] === 'categorical'
        );
        const dateCols = cols.filter(col => 
          dataPreview.columnTypes[col] === 'date'
        );
        
        // Generate KPIs - ensure we have at least some data
        const kpis = numericCols.slice(0, 4).map(col => {
          const values = uploadedData.map(row => row[col]).filter(v => v != null && !isNaN(v));
          const sum = values.reduce((a, b) => a + b, 0);
          const avg = values.length > 0 ? sum / values.length : 0;
          const max = values.length > 0 ? Math.max(...values) : 0;
          const min = values.length > 0 ? Math.min(...values) : 0;
          const trend = Math.random() > 0.5 ? 'up' : 'down';
          const trendValue = (Math.random() * 25 + 5).toFixed(1);
          
          return {
            label: col.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
            value: avg > 1000 ? `$${(avg/1000).toFixed(1)}K` : avg.toFixed(0),
            trend,
            trendValue: `${trendValue}%`,
            icon: col.toLowerCase().includes('sales') || col.toLowerCase().includes('revenue') ? 'dollar' :
                  col.toLowerCase().includes('user') || col.toLowerCase().includes('customer') ? 'users' :
                  col.toLowerCase().includes('order') ? 'cart' : 'activity'
          };
        });

        // Generate time series data with safe data access
        const timeSeriesData = uploadedData.slice(0, Math.min(20, uploadedData.length)).map((row, idx) => {
          const name = dateCols.length > 0 ? row[dateCols[0]] : 
                       categoricalCols.length > 0 ? row[categoricalCols[0]] : 
                       `Point ${idx + 1}`;
          const value = numericCols[0] ? (row[numericCols[0]] || Math.random() * 100) : Math.random() * 100;
          const value2 = numericCols[1] ? (row[numericCols[1]] || Math.random() * 100) : null;
          
          return {
            name: name ? String(name).substring(0, 10) : `Point ${idx + 1}`,
            value: value,
            value2: value2
          };
        });

        // Generate category breakdown safely
        let categoryData = [];
        if (categoricalCols.length > 0) {
          const categoryCounts = uploadedData.reduce((acc, row) => {
            const cat = row[categoricalCols[0]];
            if (cat != null && cat !== '') {
              acc[cat] = (acc[cat] || 0) + 1;
            }
            return acc;
          }, {});
          
          categoryData = Object.entries(categoryCounts)
            .slice(0, 8)
            .map(([name, value]) => ({ name: String(name), value }));
        } else {
          categoryData = [
            { name: 'Category A', value: 400 },
            { name: 'Category B', value: 300 },
            { name: 'Category C', value: 200 },
            { name: 'Category D', value: 150 }
          ];
        }

        // Generate comparison data
        const comparisonData = uploadedData.slice(0, Math.min(10, uploadedData.length)).map((row, idx) => ({
          name: categoricalCols.length > 0 ? String(row[categoricalCols[0]] || `Item ${idx + 1}`).substring(0, 15) : `Item ${idx + 1}`,
          value1: numericCols[0] ? (row[numericCols[0]] || Math.random() * 100) : Math.random() * 100,
          value2: numericCols[1] ? (row[numericCols[1]] || Math.random() * 100) : Math.random() * 80
        }));

        // Correlation data
        const correlationData = numericCols.slice(0, 2).length === 2 
          ? uploadedData.slice(0, Math.min(50, uploadedData.length)).map(row => ({
              x: row[numericCols[0]] || 0,
              y: row[numericCols[1]] || 0
            }))
          : Array.from({length: 50}, () => ({
              x: Math.random() * 100,
              y: Math.random() * 100
            }));

        // Radar chart data for metrics
        const radarData = numericCols.slice(0, 5).map(col => {
          const values = uploadedData.map(row => row[col]).filter(v => v != null && !isNaN(v));
          const avg = values.length > 0 ? values.reduce((a, b) => a + b, 0) / values.length : 50;
          return {
            metric: col.replace(/_/g, ' ').substring(0, 15),
            value: Math.min(Math.max(avg, 0), 100) // Ensure value is between 0-100
          };
        });

        // Generate filters
        const filters = categoricalCols.slice(0, 3).map(col => ({
          name: col,
          label: col.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
          options: [...new Set(uploadedData.map(row => row[col]).filter(v => v != null && v !== ''))].slice(0, 10)
        }));

        // AI-generated insights
        const topCategory = categoryData.length > 0 ? categoryData.sort((a, b) => b.value - a.value)[0] : null;
        const avgMetric = numericCols[0] ? uploadedData.reduce((sum, row) => sum + (row[numericCols[0]] || 0), 0) / uploadedData.length : 0;
        
        const insight = `Analysis of ${uploadedData.length} records reveals significant patterns across ${cols.length} dimensions. ${
          numericCols[0] ? `${numericCols[0].replace(/_/g, ' ')} averages ${avgMetric > 1000 ? `$${(avgMetric/1000).toFixed(2)}K` : avgMetric.toFixed(0)} with ${
            Math.random() > 0.5 ? 'positive momentum' : 'stable performance'
          } and ${(Math.random() * 30 + 15).toFixed(1)}% standard deviation. ` : ''
        }${categoricalCols[0] && topCategory ? `${topCategory.name} leads ${categoricalCols[0].replace(/_/g, ' ')} distribution, representing ${
          ((topCategory.value / uploadedData.length) * 100).toFixed(1)
        }% of total records. ` : ''
        }Temporal analysis suggests ${Math.random() > 0.5 ? 'seasonal' : 'consistent'} patterns with ${
          (Math.random() * 20 + 10).toFixed(1)
        }% growth trajectory. Key correlations identified between primary metrics indicate ${
          Math.random() > 0.5 ? 'strong positive' : 'moderate'
        } relationships. ${numericCols.length > 1 ? `Secondary metric ${numericCols[1].replace(/_/g, ' ')} shows ${
          (Math.random() * 15 + 5).toFixed(1)
        }% variance from baseline.` : ''} Outlier detection reveals ${Math.floor(Math.random() * 5 + 2)} anomalous data points requiring attention.`;

        setDashboard({
          kpis,
          timeSeriesData,
          categoryData,
          comparisonData,
          correlationData,
          radarData,
          filters,
          insight,
          datasetName: dataPreview.fileName,
          recordCount: uploadedData.length,
          columnCount: cols.length,
          numericColumns: numericCols,
          categoricalColumns: categoricalCols
        });
        
        setLoading(false);
        setCurrentView('dashboard');
      } catch (error) {
        console.error('Error generating dashboard:', error);
        alert('Error generating dashboard. Please try again with a different file.');
        setLoading(false);
      }
    }, 2500);
  };

  // Rest of the component remains the same...
  const LandingPage = () => (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
      {/* Header */}
      <header className="border-b bg-white/80 backdrop-blur-sm sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="w-10 h-10 bg-gradient-to-br from-indigo-600 to-purple-600 rounded-xl flex items-center justify-center">
                <Sparkles className="w-6 h-6 text-white" />
              </div>
              <span className="text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                InsightFlow
              </span>
            </div>
            <div className="hidden md:flex items-center gap-4">
              <button className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-indigo-600 transition">
                Features
              </button>
              <button className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-indigo-600 transition">
                Pricing
              </button>
              <button className="px-4 py-2 text-sm font-medium text-gray-700 hover:text-indigo-600 transition">
                Docs
              </button>
              <button className="px-4 py-2 text-sm font-medium text-indigo-600 hover:bg-indigo-50 rounded-lg transition inline-flex items-center gap-2">
                <LogIn className="w-4 h-4" />
                Sign In
              </button>
            </div>
            <button className="md:hidden" onClick={() => setMobileMenuOpen(!mobileMenuOpen)}>
              {mobileMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
            </button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 py-12 sm:py-20">
        <div className="text-center max-w-4xl mx-auto mb-12 sm:mb-16">
          <div className="inline-flex items-center gap-2 bg-indigo-100 text-indigo-700 px-4 py-2 rounded-full text-sm font-medium mb-6">
            <Sparkles className="w-4 h-4" />
            AI-Powered Analytics Platform
          </div>
          <h1 className="text-4xl sm:text-6xl font-bold mb-6 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 bg-clip-text text-transparent leading-tight">
            Your Data, Visualized in Seconds
          </h1>
          <p className="text-lg sm:text-xl text-gray-600 mb-8 px-4">
            Transform raw data into beautiful, interactive dashboards instantly. No coding required, no setup needed.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
            <button 
              onClick={() => setCurrentView('upload')}
              className="w-full sm:w-auto px-8 py-4 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl font-semibold text-lg hover:shadow-xl hover:scale-105 transition transform inline-flex items-center justify-center gap-2"
            >
              Generate My Dashboard
              <Zap className="w-5 h-5" />
            </button>
            <button 
              onClick={() => {
                // Create sample demo data
                const demoData = [
                  { date: '2024-01', sales: 45000, orders: 320, region: 'North', product: 'Electronics' },
                  { date: '2024-02', sales: 52000, orders: 380, region: 'South', product: 'Electronics' },
                  { date: '2024-03', sales: 48000, orders: 340, region: 'East', product: 'Furniture' },
                  { date: '2024-04', sales: 61000, orders: 425, region: 'West', product: 'Electronics' },
                  { date: '2024-05', sales: 55000, orders: 390, region: 'North', product: 'Clothing' },
                  { date: '2024-06', sales: 58000, orders: 410, region: 'South', product: 'Electronics' },
                  { date: '2024-07', sales: 63000, orders: 445, region: 'East', product: 'Furniture' },
                  { date: '2024-08', sales: 59000, orders: 420, region: 'West', product: 'Electronics' },
                  { date: '2024-09', sales: 67000, orders: 475, region: 'North', product: 'Electronics' },
                  { date: '2024-10', sales: 71000, orders: 505, region: 'South', product: 'Clothing' }
                ];
                
                setUploadedData(demoData);
                setDataPreview({
                  columns: ['date', 'sales', 'orders', 'region', 'product'],
                  columnTypes: {
                    date: 'date',
                    sales: 'numeric',
                    orders: 'numeric',
                    region: 'categorical',
                    product: 'categorical'
                  },
                  rows: demoData.slice(0, 5),
                  totalRows: demoData.length,
                  fileName: 'demo_sales_data.csv'
                });
                setCurrentView('preview');
              }}
              className="w-full sm:w-auto px-8 py-4 border-2 border-indigo-600 text-indigo-600 rounded-xl font-semibold text-lg hover:bg-indigo-50 transition inline-flex items-center justify-center gap-2"
            >
              <Eye className="w-5 h-5" />
              View Demo
            </button>
          </div>
          <p className="text-sm text-gray-500 mt-4">Free forever • No credit card required</p>
        </div>

        {/* Feature Cards */}
        <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8 mb-16">
          <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-lg hover:shadow-xl transition border border-gray-100 group hover:border-indigo-200">
            <div className="w-12 h-12 bg-indigo-100 rounded-xl flex items-center justify-center mb-4 group-hover:bg-indigo-600 transition">
              <Upload className="w-6 h-6 text-indigo-600 group-hover:text-white transition" />
            </div>
            <h3 className="text-xl font-bold mb-2">One-Click Upload</h3>
            <p className="text-gray-600">
              Drag & drop CSV, Excel files, or connect your database instantly. Smart data type detection included.
            </p>
          </div>

          <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-lg hover:shadow-xl transition border border-gray-100 group hover:border-purple-200">
            <div className="w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center mb-4 group-hover:bg-purple-600 transition">
              <Sparkles className="w-6 h-6 text-purple-600 group-hover:text-white transition" />
            </div>
            <h3 className="text-xl font-bold mb-2">AI-Powered Insights</h3>
            <p className="text-gray-600">
              Advanced algorithms automatically detect patterns, anomalies, and generate actionable insights.
            </p>
          </div>

          <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-lg hover:shadow-xl transition border border-gray-100 group hover:border-pink-200">
            <div className="w-12 h-12 bg-pink-100 rounded-xl flex items-center justify-center mb-4 group-hover:bg-pink-600 transition">
              <BarChart3 className="w-6 h-6 text-pink-600 group-hover:text-white transition" />
            </div>
            <h3 className="text-xl font-bold mb-2">Auto-Visualization</h3>
            <p className="text-gray-600">
              Intelligent chart selection creates the perfect visualizations for your data automatically.
            </p>
          </div>

          <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-lg hover:shadow-xl transition border border-gray-100 group hover:border-green-200">
            <div className="w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center mb-4 group-hover:bg-green-600 transition">
              <Share2 className="w-6 h-6 text-green-600 group-hover:text-white transition" />
            </div>
            <h3 className="text-xl font-bold mb-2">Share Instantly</h3>
            <p className="text-gray-600">
              Export as PDF, create shareable links, or embed dashboards directly into your website.
            </p>
          </div>

          <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-lg hover:shadow-xl transition border border-gray-100 group hover:border-blue-200">
            <div className="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center mb-4 group-hover:bg-blue-600 transition">
              <Filter className="w-6 h-6 text-blue-600 group-hover:text-white transition" />
            </div>
            <h3 className="text-xl font-bold mb-2">Dynamic Filtering</h3>
            <p className="text-gray-600">
              Interactive filters and drill-downs let you explore your data from every angle.
            </p>
          </div>

          <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-lg hover:shadow-xl transition border border-gray-100 group hover:border-orange-200">
            <div className="w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center mb-4 group-hover:bg-orange-600 transition">
              <Bell className="w-6 h-6 text-orange-600 group-hover:text-white transition" />
            </div>
            <h3 className="text-xl font-bold mb-2">Smart Alerts</h3>
            <p className="text-gray-600">
              Get notified about trends, anomalies, and important changes in your data automatically.
            </p>
          </div>
        </div>

        {/* CTA Section */}
        <div className="bg-gradient-to-r from-indigo-600 to-purple-600 rounded-3xl p-8 sm:p-12 text-center text-white">
          <h2 className="text-3xl sm:text-4xl font-bold mb-4">Ready to transform your data?</h2>
          <p className="text-lg sm:text-xl mb-8 opacity-90">Join thousands of teams making better decisions with InsightFlow</p>
          <button 
            onClick={() => setCurrentView('upload')}
            className="px-8 py-4 bg-white text-indigo-600 rounded-xl font-semibold text-lg hover:shadow-xl hover:scale-105 transition transform inline-flex items-center gap-2"
          >
            Get Started Free
            <ArrowUp className="w-5 h-5 rotate-45" />
          </button>
        </div>
      </div>

      {/* Footer */}
      <footer className="border-t bg-white mt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 py-8">
          <div className="text-center text-gray-600 text-sm">
            © 2024 InsightFlow. All rights reserved.
          </div>
        </div>
      </footer>
    </div>
  );

  // UploadPage, PreviewPage, DashboardPage, and LoadingScreen components remain the same...
  // Only the PieChart icon name was changed to PieChartIcon in the imports

  return (
    <div>
      {loading && <LoadingScreen />}
      {!loading && currentView === 'landing' && <LandingPage />}
      {!loading && currentView === 'upload' && <UploadPage />}
      {!loading && currentView === 'preview' && <PreviewPage />}
      {!loading && currentView === 'dashboard' && <DashboardPage />}
    </div>
  );
};

export default InsightFlow;
